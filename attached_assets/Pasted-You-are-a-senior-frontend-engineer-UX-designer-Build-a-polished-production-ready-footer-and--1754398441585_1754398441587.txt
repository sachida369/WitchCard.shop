You are a senior frontend engineer & UX designer. Build a polished, production-ready **footer** and a **news channel / blog post management UI** for a modern website. Produce semantic HTML, clean CSS (Tailwind CSS classes are OK — but also include a plain CSS fallback file), and vanilla JavaScript for required interactivity. The output must be copy/paste runnable as three files (footer.html, footer.css, footer.js) or a single HTML file with embedded CSS & JS. Keep the code lightweight and dependency-free unless absolutely necessary.

GOALS:
1. Beautiful, accessible, responsive footer that aligns perfectly across devices and contains:
   - Brand logo & short tagline
   - Horizontal navigation (About, Products, News, Blog, Contact, Privacy, Terms)
   - Social share icons (Facebook, Instagram, LinkedIn, WhatsApp, X/Twitter, Bluesky, Threads) with accessible aria-labels and placeholder share links
   - Newsletter signup (email field + subscribe button) with simple client-side validation and success/error UI
   - Quick links column (3–4 links)
   - Contact column (email, phone, small address)
   - Copyright line and small sitemap link
   - Compact dark-mode variant toggle (saves preference to localStorage)
   - Fully keyboard accessible (tab order, visible focus states)
   - Mobile collapsible sections for columns (accordion style) on screens <768px

2. News Channel / Blog Tab UI (integrated with footer page or accessible via a toggle):
   - A **news admin panel** that allows manual addition/editing/deleting of news or blog posts (form fields: Title, Short summary, Content (WYSIWYG-lite textarea), Category, Tags, Author, Publish date & time (scheduling), Cover image upload (accepts image, preview client-side), Status: Draft/Published)
   - List of created posts with pagination, quick edit, publish/unpublish toggle, delete with confirmation
   - A frontend **news listing** view that shows posts with image, title, excerpt, author, date, tags, and social share buttons for each post
   - Client-side search and tag filter, sort by newest/popular
   - SEO-friendly meta preview generator (title, meta description snippet live update while editing)
   - Option to export RSS (generate simple RSS XML from current posts)
   - Local persistence using browser IndexedDB or localStorage (explain comment where to plug in real backend)
   - Responsive layout: grid on desktop, single column on mobile
   - Accessibility: article landmarks, alt text for images, skip-to-content link support

3. Visual & UX details:
   - Elegant, slightly mystical theme if possible (soft gradients, subtle glassmorphism, silver foil shimmer accent for CTAs)
   - Use consistent spacing, readable type scale (fluid typography recommended), and clear CTA styling
   - Provide small animation for card hover, flip effect for featured post, and subtle parallax / sparkle accent on hero/backdrop (CSS only)
   - Use SVG icons inline (not external images) for social icons
   - Include sample dummy content (3–5 news posts) so UI looks real on load

4. Deliverables in the output:
   - **A single file (preferred)** `news_footer.html` containing semantic HTML, `<style>` with CSS, and `<script>` with JS, OR three separate files with clear filenames and content blocks
   - Clear comments in the code showing where to “plug in” server APIs (CRUD endpoints), authentication hooks, or replace localStorage with real DB calls
   - Minimal, unobtrusive console logs and no external network calls
   - A short README comment at the top explaining how to use and integrate

WRITING TONE FOR TEXT (UI copy):
- Use friendly, human copy (e.g., “Join 5,000 readers — weekly magic & news”), short microcopy for form errors/success, and short placeholder content.
- All internal labels should be human-readable and concise.

EXTRA (Optional but appreciated):
- Provide a small utility that auto-generates low-competition SEO-friendly titles from the post content (eg. extract nouns/phrases and suggest 3 variants).
- Add a “Share This” compact modal that shows social icons and copy-to-clipboard share link.

Now produce the full code files (or single HTML file) implementing everything above. Ensure the UI is pixel-perfect on desktop and mobile, keyboard accessible, and includes sample posts so I can test immediately. Keep code tidy and commented.
